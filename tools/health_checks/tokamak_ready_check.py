#!/usr/bin/env python3
"""tokamak_ready_check.py
====================================================
Daily health-check for the Fusion-Tokamak workspace.
Run at the start of each session (or schedule via
Windows Task Scheduler) to verify that key files,
Python dependencies, and system resources are in
place before launching heavy simulations.

Derived from the original Muse script but trimmed
and adapted for engineering/dev-ops context.
"""
from __future__ import annotations

import os
import platform
import shutil
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from typing import List, Tuple

# ---------------------------------------------------------------------------
# CONFIG
# ---------------------------------------------------------------------------
REPO_ROOT = Path(__file__).resolve().parents[2]  # d:/Projects/Fusion-Tokamak
DASHBOARD_SCRIPT = REPO_ROOT / "dashboard" / "integrated_validation_dashboard.py"
COIL_GLOB = list(REPO_ROOT.glob("tf_coils*.csv"))
KPI_CSV = REPO_ROOT / "simulation" / "results.csv"
DB_FILE = REPO_ROOT / "tokamak_validation.db"
STARTUP_BATCH = REPO_ROOT / "start_tokamak_dashboard.bat"

REQUIRED_PY_PACKAGES = [
    "numpy",
    "matplotlib",
    "tkinter",  # stdlib on Windows but import check useful
    "sqlite3",   # stdlib module
]

OPTIONAL_PY_PACKAGES = [
    "pandas",        # convenient for data handling
]

# ---------------------------------------------------------------------------
# UTILITIES
# ---------------------------------------------------------------------------

ICONS = {
    "INFO": "ℹ️ ",
    "SUCCESS": "✅",
    "WARNING": "⚠️ ",
    "ERROR": "❌",
}

def log(msg: str, status: str = "INFO") -> None:
    print(f"{ICONS.get(status, 'ℹ️ ')} {msg}")


def check_python_packages() -> bool:
    log("Checking Python packages…")
    ok = True
    for pkg in REQUIRED_PY_PACKAGES + OPTIONAL_PY_PACKAGES:
        try:
            __import__(pkg)
            log(f"{pkg}: available", "SUCCESS")
        except ImportError:
            level = "WARNING" if pkg in OPTIONAL_PY_PACKAGES else "ERROR"
            ok = ok and (level != "ERROR")
            log(f"{pkg}: missing", level)
    return ok


def check_files() -> bool:
    log("Checking key project files…")
    required: List[Tuple[bool, str]] = []

    required.append((DASHBOARD_SCRIPT.exists(), "Dashboard script"))
    required.append((bool(COIL_GLOB), "TF coil CSV"))
    required.append((KPI_CSV.exists(), "Simulation KPI CSV"))
    required.append(((REPO_ROOT / "tools" / "coil_design" / "PRIME_PHI_CONSCIOUSNESS_GENERATOR.py").exists(), "Coil generator script"))

    all_ok = True
    for exists, desc in required:
        if exists:
            log(f"{desc}: found", "SUCCESS")
        else:
            log(f"{desc}: missing", "ERROR")
            all_ok = False
    return all_ok


def check_disk_space(min_free_gb: int = 5) -> bool:
    total, used, free = shutil.disk_usage(REPO_ROOT)
    free_gb = free // (1024 ** 3)
    if free_gb >= min_free_gb:
        log(f"Disk space: {free_gb} GB free", "SUCCESS")
        return True
    log(f"Disk space: {free_gb} GB free (< {min_free_gb} GB)", "WARNING")
    return False


def create_startup_batch() -> None:
    content = f"""@echo off
REM Auto-generated by tokamak_ready_check
python "{DASHBOARD_SCRIPT}" %*
"""
    STARTUP_BATCH.write_text(content)
    log(f"Startup batch written to {STARTUP_BATCH}", "SUCCESS")


def main() -> None:
    print("=" * 60)
    print("🌀 TOKAMAK MORNING READY CHECK")
    print("=" * 60)
    log(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    log(f"System: {platform.system()} {platform.release()} ({platform.machine()})")

    all_ok = True
    if not check_files():
        all_ok = False
    print()
    if not check_python_packages():
        all_ok = False
    print()
    check_disk_space()
    print()
    create_startup_batch()

    print("=" * 60)
    if all_ok:
        log("All critical systems nominal. Ready for operations.", "SUCCESS")
        log(f"Run {STARTUP_BATCH.name} to open dashboard.")
    else:
        log("Issues detected – review messages above.", "WARNING")
    print("=" * 60)


if __name__ == "__main__":
    main()
